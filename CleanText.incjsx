#include "FindChangeUsingGREP.incjsx"

// Чистка текста
function CleanText (myText, properties, /* optional */ pBar) {
	pBar && pBar.set(++myCurrActionNumber);
	
	myFindChangeUsingGREP(
		myText, 
		"[" + myLineOfSpaces + "]",
		mySingleSpace, 
		pBar,
		" Замена шпаций на пробелы" 
	);
	
	if (properties.myOneLineIsOneAbzatzFromMenu == 1) { // myOneLineIsOneAbzatzFromMenu == 1
		// В таких текстах, когда каждая строка является одним абзацем, критерием истинного начала абзаца служит два или три пробела после знака Enter.
		// Очевидно, что после первого запуска текст станет нормальным, и эти повторяющиеся пробелы мсчезнут.
		// Но если вновь запустить скрипт, то текст превратится в один сплошной абзац.
		// Чтобы избежать этого кошмара, надо перед выполнением обработки убедиться, что в тексте есть хоть одно появление Enter-пробел-пробел.
		app.findGrepPreferences = NothingEnum.nothing;
		app.findGrepPreferences.findWhat = "(\\r  )";				
		var myFoundSamples = myText.findGrep();
		
		if (myFoundSamples.length != 0) { // найдены 'Enter-пробел-пробел'
			pBar && pBar.info(" Сборка однострочных абзацев в нормальный текст");
			app.findGrepPreferences = NothingEnum.nothing;
			app.findGrepPreferences.findWhat = "(-\\r)";				
			myFoundSamples = myText.findGrep();
			
			if (myFoundSamples.length != 0) { // myFoundSamples.length != 0
				var characterStyle = myDocument.characterStyles.itemByName("characterStyles");
				
				// цикл по числу элементов коллекции. Движение снизу вверх
				for (var j = myFoundSamples.length - 1; j >= 0; j--) { // j >= 0; j--	
					myLine = myFoundSamples[j] ;
					myLine.characters[0].appliedCharacterStyle = characterStyle;
					myLine.characters[1].remove();
				} // j >= 0; j--
			} // myFoundSamples.length != 0
			else {
				characterStyle.remove();
			}
			///
			///>
			PlaceHolderForEnter = "Abzatz#";
			///>
			app.findGrepPreferences = NothingEnum.nothing;
			app.findGrepPreferences.findWhat = "(\\r\\r)";				
			myFoundSamples = myText.findGrep();
			
			if (myFoundSamples.length != 0) { // myFoundSamples.length != 0
			// цикл по числу элементов коллекции. Движение снизу вверх
				for (var j = myFoundSamples.length - 1; j >= 0; j--) { // j >= 0; j--	
					myLine = myFoundSamples[j] ;
					myLine.contents = PlaceHolderForEnter;
				} // j >= 0; j--
			} // myFoundSamples.length != 0
			///
			app.findGrepPreferences = NothingEnum.nothing;
			app.findGrepPreferences.findWhat = "(\\r  )";				
			myFoundSamples = myText.findGrep();
			
			if (myFoundSamples.length != 0) { // myFoundSamples.length != 0
				
				// цикл по числу элементов коллекции. Движение снизу вверх
				for (var j = myFoundSamples.length - 1; j >= 0; j--) { // j >= 0; j--	
					myLine = myFoundSamples[j] ;
					myLine.contents = PlaceHolderForEnter;
				} // j >= 0; j--
			} // myFoundSamples.length != 0
			///
			app.findGrepPreferences = NothingEnum.nothing;
			app.findGrepPreferences.findWhat = "(\\r)";				
			myFoundSamples = myText.findGrep();
			
			if (myFoundSamples.length != 0) { // myFoundSamples.length != 0
				
				// цикл по числу элементов коллекции. Движение снизу вверх
				for (var j = myFoundSamples.length - 1; j >= 0; j--) { // j >= 0; j--	
					myLine = myFoundSamples[j] ;
					myLine.characters[0].contents = " ";
				} // j >= 0; j--
			} // myFoundSamples.length != 0
			///
			app.findGrepPreferences = NothingEnum.nothing;
			app.findGrepPreferences.findWhat = PlaceHolderForEnter;				
			myFoundSamples = myText.findGrep();
			
			if (myFoundSamples.length != 0) { // myFoundSamples.length != 0
				
				// цикл по числу элементов коллекции. Движение снизу вверх
				for (var j = myFoundSamples.length - 1; j >= 0; j--) { // j >= 0; j--	
					myLine = myFoundSamples[j] ;
					myLine.contents = "\r";
				} // j >= 0; j--
			} // myFoundSamples.length != 0
		} // найдены 'Enter-пробел-пробел'
	} // myOneLineIsOneAbzatzFromMenu == 1
	myFindChangeUsingGREP(myText, "\\]", "] ", pBar, " Порядок в оформлении скобок ]");
	myFindChangeUsingGREP(myText, "\\[", " [", pBar, " Порядок в оформлении скобок [");
	myFindChangeUsingGREP(myText, "\\)", ") ", pBar, " Порядок в оформлении скобок )");
	myFindChangeUsingGREP(myText, "\\(", " (", pBar, " Порядок в оформлении скобок (");
	myFindChangeUsingGREP(myText, "\\}", "} ", pBar, " Порядок в оформлении скобок }");
	myFindChangeUsingGREP(myText, "\\{", " {", pBar, " Порядок в оформлении скобок {");
	myFindChangeUsingGREP(myText, myMultipleSpaces, mySingleSpace, pBar, " Избавление от повторяющихся пробелов ");
	myFindChangeUsingGREP(myText, "(д\\.)(\\d)", "$1" +" " + "$2", pBar, " Отбивка между 'д.' и номером");  
	myFindChangeUsingGREP(myText, "(д\\.)( )(\\d)", "$1" + myThinSpace + "$3", pBar, " Отбивка между 'д.' и номером");  
	//myFindChangeUsingGREP(myText,"([[:blank:]]*)",mySingleSpace); // эта строка и табуляцию учитывает. А тут это не допустимо
	myFindChangeUsingGREP(myText,myNonbreakingHyphen, "-", pBar, " Замена неразрывных дефисов на обычные");

	if (properties.repCharFromMenu != 2) { // repCharFromMenu != 2
		pBar && pBar.set(++myCurrActionNumber);
		
		if (properties.repCharFromMenu == 1) {
			myFindChangeUsingGREP(myText,"\\n{2,}", "\\n", pBar, " Избавление от повторяющихся переводов строки");
			myFindChangeUsingGREP(myText,"\\r{2,}", mySingleReturn, pBar, " Избавление от повторяющихся переводов строки");
		}
		// удаление переводов строки и одиночных пробелов в начале и конце ячеек таблиц
		var myCellPara;
		var myCellParaCont = "";
		
		for (var i = 0, l = myText.tables.length; i < l; i++) { // i
			
			for (var j = 0, m = myText.tables[i].cells.length; j < m; j++) { // j
				myCellPara = myText.tables[i].cells[j];
				myCellParaCont = myCellPara.contents;
				
				if (myCellParaCont.length != 0) { // myCellParaCont.length != 0
					try { 
						if (myCellPara.characters.lastItem().contents == mySingleReturn) {
							myCellPara.paragraphs.lastItem().characters.lastItem().remove(); 
						}
					} catch(e) { }
					try { 
						if (myCellPara.characters.lastItem().contents == " ") {
							myCellPara.paragraphs.lastItem().characters.lastItem().remove(); 
						}
					} catch(e) { }
					try { 
						if (myCellPara.characters.firstItem().contents == mySingleReturn) {
							myCellPara.paragraphs.firstItem().characters.firstItem().remove(); 
						}
					} catch(e) { }
					try { 
						if (myCellPara.characters.firstItem().contents == " ") {
							myCellPara.paragraphs.firstItem().characters.firstItem().remove(); 
						}
					} catch(e) { }
				} // myCellParaCont.length != 0
			} // j
		} // i
		// удаление переводов строки в конце сноски
		var myFootnote;
		var myFootnoteCont;
		
		for (var i = 0, l = myText.footnotes.length; i < l; i++) { // i
			myFootnote = myText.footnotes[i];
			myFootnoteCont = myFootnote.contents;
			
			if (myFootnoteCont.length != 0) { // != 0
				if (myFootnote.characters.lastItem().contents == mySingleReturn)  { try { myFootnote.paragraphs.lastItem().characters.lastItem().remove(); } catch(e) { }  }
				if (myFootnote.characters.lastItem().contents == " ")  { try { myFootnote.paragraphs.lastItem().characters.lastItem().remove(); } catch(e) { }  }
			} // != 0  
		} // i
	} // repCharFromMenu != 2
	
	if (properties.tabs2spacesFromMenu != 2) { // tabs2spacesFromMenu != 2
		pBar && pBar.set(++myCurrActionNumber);
		
		if (properties.tabs2spacesFromMenu == 1) { 
			myFindChangeUsingGREP(
				myText, 
				myMultipleTabs,
				mySingleSpace,
				pBar,
				" Замена повторяющихся табуляций на пробелы."); 
			myFindChangeUsingGREP(
				myText, 
				"\t",
				mySingleSpace,
				pBar,
				" Замена повторяющихся табуляций на пробелы.."); 
			myFindChangeUsingGREP(
				myText, 
				"([\\r\\n])( )",
				"$1",
				pBar,
				" Замена повторяющихся табуляций на пробелы..."); 
		}
	} // tabs2spacesFromMenu != 2    
	//myFindChangeUsingGREP(myText, "(Дж\\.)( *)(Дж\\.)", "$1" + myThinSpace + "$3",pBar," Порядок в написании Дж. (сокращение имени)");
	//myFindChangeUsingGREP(myText, "(св\\.)( *)(св\\.)", "$1" + myThinSpace + "$3",pBar," Порядок в написании св.");
	//  ~e -- это многоточие
	myFindChangeUsingGREP(myText, "\\.\\.\\.","~e",pBar," Замена трех точек на многоточие");
	//myFindChangeUsingGREP(myText, "\\.\\.\\.\\.","~e ",pBar," Четыре точки на многоточие и пробел");
	myFindChangeUsingGREP(myText, "~e\\.","~e ",pBar," Многоточие и точка на многоточие и пробел");
	myFindChangeUsingGREP(myText, "\\.~e","\. ~e",pBar," Точка и многоточие на точку пробел и многоточие");
	//myFindChangeUsingGREP(myText, ",\\.\\.\\.",",\.\. ",pBar," Запятая и три точки");
	//myFindChangeUsingGREP(myText, ",~e",",\.\. ",pBar," Запятая и многоточие");
	//myFindChangeUsingGREP(myText, "!\\.\\.\\.","!\.\. ",pBar," Восклицательный знак и три точки");
	//myFindChangeUsingGREP(myText, "!~e","!\.\. ",pBar," Восклицательный знак и многоточие"); 
	//myFindChangeUsingGREP(myText, "\\?\\.\\.\\.","?\.\. ",pBar," Вопросительный знак и три точки"); 
	//myFindChangeUsingGREP(myText, "\\?~e","?\.\. ",pBar," Вопросительный знак и многоточие");  
	myFindChangeUsingGREP(myText, myChar0x2212,"–",pBar," Замена минуса (знак с кодом 0х2212) на короткое тире"); 
	myFindChangeUsingGREP(myText, "(\\r|\\n)( )","$1",pBar," Удаление пробела после перевода строки");
	
	if (properties.hyphensFromMenu != 2) { // hyphensFromMenu != 2
		pBar && pBar.set(++myCurrActionNumber);
		
		if (properties.hyphensFromMenu == 1) {
			// удаляем переносы, которые могли остаться из кварковских файлов
			myFindChangeUsingGREP(myText, myDiscretionaryHyphen,"",pBar," Удаление переносов");  
			// удаляем переносы, которые могли остаться из вордовских файлов
			myFindChangeUsingGREP(myText, myWinWordHyphen,"",pBar," Удаление переносов"); 
		}
	} // hyphensFromMenu != 2    
	myFindChangeUsingGREP(myText, "(°)( *)([CС])","$1" + "C",pBar," Приведение в порядок написания температуры по Цельсию"); // русская и латинская буквы С
	myFindChangeUsingGREP(myText, "(\\d)(°C)","$1" + " " + "$2",pBar," Приведение в порядок написания температуры по Цельсию");  
	myFindChangeUsingGREP(myText, "--","—",pBar," Замена двух подряд идущих дефисов на тире");
	myFindChangeUsingGREP(myText, "([\\(\\[\\{])( )","$1",pBar," Удаление пробела после открывающей скобки");  
	myFindChangeUsingGREP(myText, "( )([\\)\\]\\}])","$2",pBar," Удаление пробела перед закрывающей скобкой"); 
	myFindChangeUsingGREP(myText, "([\\r\\n \\(])([-—])(\\d)","$1" + myMinusChar + "$3",pBar," Ищем пробел и тире (или дефис) перед цифрой и ставим перед цифрой минус"); 
	myFindChangeUsingGREP(myText, myNonbreakingHyphen + myNonbreakingHyphen,"—",pBar," Замена двух подряд идущих неразрывных дефисов на тире"); 
	myFindChangeUsingGREP(myText, "-" + myNonbreakingHyphen,"—",pBar," Замена обычного дефиса и неразрывного на тире"); 
	myFindChangeUsingGREP(myText, myNonbreakingHyphen + "-","—",pBar," Замена неразрывного дефиса и обычного на тире");  
	myFindChangeUsingGREP(myText, "(,|\\.)( *)(-|–|—)","$1" + "—",pBar," Удаление пробела после запятой(или точки) перед тире (попутно минус или дефис превращаем в тире)"); 
	myFindChangeUsingGREP(myText, "([\\l\\u])(—)([\\l\\u])", "$1" + " — " + "$3",pBar,"  Разделяющий слова минус превращаем в тире)"); 
	myFindChangeUsingGREP(myText, " - "," — ",pBar," Замена дефиса, отбитого пробелами, на тире со стандартными отбивками");
	myFindChangeUsingGREP(myText, " – "," — ",pBar," Замена минуса, отбитого пробелами, на тире со стандартными отбивками");
	myFindChangeUsingGREP(myText, "( *)([\\.,;:!\\?\\)\\]\\}%‰])","$2",pBar," Удаление пробелов перед знаками пунктуации, скобками, знаками % и ‰");
	myFindChangeUsingGREP(myText, "(\\r)( *)([-–—])( *)(\\u|„|“|«|»|”|‚|‘|’|\'|\"|~e)","$1" + "—" + myEnSpace + "$5",pBar," Дефис или минус в начале абзаца заменяется на тире, после полукруглая шпация");
	myFindChangeUsingGREP(myText, "([!\\?])(\\u)","$1"+" "+"$2",pBar," Восстановление потерянного пробела после ! или ?");
	myFindChangeUsingGREP(myText, "([~e,:;])([\\l\\u])","$1"+" "+"$2",pBar," Восстановление потерянного пробела после знаков пунктуации");
	myFindChangeUsingGREP(myText, "([~e,.])([-–—])( *)([\\l\\u])","$1"+ " " + "$2" +" " + "$4",pBar," Восстановление потерянного пробела перед тире");
	myFindChangeUsingGREP(myText, "(\\d)( *)(г\\.|гг\\.|г\\.г\\.)","$1" + myNonbreakingSpaceFixedWidth + "$3",pBar," Неразрывный пробел перед 'г.' или 'гг.'" );
	myFindChangeUsingGREP(myText, "(I|V|X|Х|L|M|М|C|С)( )(в.|вв.|век)","$1" + myNonbreakingSpace + "$3",pBar," Неразрывный пробел между римской цифрой и 'в./вв./век'" ); // XХ MМ CС  -- русские и латинские буквы
	myFindChangeUsingGREP(myText, "(I|V|X|Х|L|M|М|C|С)(-|–|—| — )(I|V|X|Х|L|M|М|C|С)","$1" + myMinusChar + "$3",pBar," Минус между римскими цифрами"); // XХ MМ CС  -- русские и латинские буквы
	myFindChangeUsingGREP(myText, "([№§])","$1" + myNonbreakingSpaceFixedWidth,pBar," Неразрывный фиксированный пробел после № или §");
	myFindChangeUsingGREP(myText, myNonbreakingSpaceFixedWidth +" ",myNonbreakingSpaceFixedWidth,pBar," Неразрывный фиксированный пробел после № или §"); // на случай, если до выполнения операции предыдущей строки перед номером и параграфом был пробел
	
	if (properties.commonTireFromMenu != 2) { // commonTireFromMenu != 2
		pBar && pBar.set(++myCurrActionNumber);
		if (properties.commonTireFromMenu == 0) {  // в качестве тире выбран минус
			myFindChangeUsingGREP(myText, " — ", " – ", pBar, " Замена тире на минус");
			myFindChangeUsingGREP(myText, "— ",  "– ",  pBar, " Замена тире на минус");
			myFindChangeUsingGREP(myText, " —",  " –",  pBar, " Замена тире на минус");
		}
	} // commonTireFromMenu != 2
	var myRealDigitSeparator = properties.minusFromMenu == 0 ? "—" : "–";
	// Минус между цифрами
	myFindChangeUsingGREP(
		myText, 
		"(\\d)(-|–|—| — | —|— | – | –|– | -|- )(\\d)",
		"$1" + myRealDigitSeparator + "$3", 
		pBar,
		" Минус между цифрами"
	);
	// следующие две строки -- учет ситуации, что при обработке последовательности цифр, разделенных дефисами, вторая цифра попала в grep-анализ, и дефис после неё обнаружен не будет.
	// Поэтому если этих строк не будет, то 1-2-3-4-5 будет выглядеть так: 1—2-3—4-5.
	// А с ними: 1—2—3—4—5
	
	if (myRealDigitSeparator == "—") {
		myFindChangeUsingGREP(
			myText, 
			"(\\d)(-|–| – | –|– | -|- )(\\d)",
			"$1" + myRealDigitSeparator + "$3",
			pBar,
			" Минус между цифрами"
		);
	}
	if (myRealDigitSeparator == "–") {
		myFindChangeUsingGREP(
			myText, 
			"(\\d)(-|—| — | —|— | -|- )(\\d)",
			"$1" + myRealDigitSeparator + "$3",
			pBar,
			" Минус между цифрами"
		);
	}
	mySetNoBreak(myText, "^9" +  myRealDigitSeparator + "^9");
	mySetNoBreak(myText, "^9" +  "-" + "^$");
	myFindChangeUsingGREP(
		myText, 
		"( в| во|\\rв|\\nв|\\rво|\\nво)(-|–|—| — | —|— | – | –|– | -|- )(\\l)", 
		"$1" + myNonbreakingHyphen + "$3",
		pBar,
		" Неразрывный дефис после частицы 'в' или 'во'"
	);
	
	if (properties.digAndCharFromMenu != 2) { // digAndCharFromMenu != 2
		pBar && pBar.set(++myCurrActionNumber);
		
		if (properties.digAndCharFromMenu == 1)  { 
			pBar && pBar.info (" Порядок в наращении чисел"); 
			myAugment(myText);
		}
	} // digAndCharFromMenu != 2
	if (properties.setquotes_valueFromMenu != 2) { // setquotes_valueFromMenu != 2
		pBar && pBar.set(++myCurrActionNumber);
		
		if (properties.setquotes_valueFromMenu == 1) { 
			pBar && pBar.info(" Обработка кавычек"); 
			myAllQuoteProcessing(myText);
		}
	} // setquotes_valueFromMenu != 2
	// mlnWithoutPointFromMenu = 2 - этот случай не анализируется, т.к. он возможен только, когда myCleanValueFromMenu = 0, но тогда не выполняются все команды  { // myCleanValueFromMenu == 1 .......  } // myCleanValueFromMenu == 1
	if (properties.mlnWithoutPointFromMenu == 0) {
		myFindChangeUsingGREP(
			myText, 
			"(млн|млрд|трлн)( |,)",
			"$1" + "\." + "$2",
			pBar,
			" Добавление точки после млн, млрд, трлн"
		);
	}
	else if (properties.mlnWithoutPointFromMenu == 1) {
		myFindChangeUsingGREP(	
			myText, 
			"(млн|млрд|трлн)(.)( |, )(\\l|\\d)",
			"$1" + "$3" + "$4",
			pBar,
			" Удаление точки после млн., млрд., трлн."
		); // (\\l|\\d) -- критерий, что точка после сокращения не является концом предложения
	}
	//myFindChangeUsingGREP(myText, "( )(\\r|\\n)", "$2",pBar," Удаление пробела перед знаком перевода строки"); < -- эта строка на стыке абзацев разных стилей работает некорректно: следующему за знаком перевода строки абзацу присваивается стиль абзаца, в котором удаляется пробел перед знаком перевода строки
	// Вот это решение свободно это этой проблемы
	app.findGrepPreferences = NothingEnum.nothing;
	app.findGrepPreferences.findWhat = " \r";				
	var myFoundSamples = myText.findGrep();
	
	if (myFoundSamples.length != 0) { // 1
		
		// цикл по числу элементов коллекции. Движение снизу вверх
		for (var j = myFoundSamples.length - 1; j >= 0; j--) {	
			myLine = myFoundSamples[j] ;
			myLine.characters[0].remove();	// удаляем пробел
		}
	} // 1
	myFindChangeUsingGREP(
		myText, 
		"(\\r|\\n)(-)( *)(\\u)", 
		"$1" + "— " + "$4",
		pBar,
		" Замена дефиса после перевода строки на тире"
	);
	// Удаление пробелов перед знаком сноски
	myRemoveSpacesBeforeFootnoteSign(myText);
	myFindChangeUsingGREP(
		myText, 
		"( )(г\\.)( *)(\\u)",
		"$1" + "$2" + myNonbreakingSpaceFixedWidth + "$4",
		pBar,
		" Востанавливаем пробел между сокращением 'г.' и названием города"
	);
	myFindChangeUsingGREP(
		myText, 
		"(=)(-|–|—)(\\d)",
		"$1" + " –" + "$3",
		pBar,
		" Восстанавливаем пробел между знаком равенства и отрицательным числом"
	);
}

////
function myRemoveSpacesBeforeFootnoteSign(myText) { // myRemoveSpacesBeforeFootnoteSign
	app.findTextPreferences = NothingEnum.nothing;
	app.findTextPreferences.findWhat = ' ^F'; // ищем пробел и знак сноски
	var myFoundSamples = myText.findText();
	
	for(var i = myFoundSamples.length; i--; ) { // myFoundSamples.length - 1
		var myFound = myFoundSamples[i];
		myFound.characters.firstItem().remove(); // пробел удаляем
	} // myFoundSamples.length - 1
} // myRemoveSpacesBeforeFootnoteSign

//////////////////
function mySetNoBreak(myText, myCharForProc) { // mySetNoBreak
	app.findTextPreferences = NothingEnum.nothing;
	app.findChangeTextOptions.includeFootnotes = true;
	app.findTextPreferences.findWhat = myCharForProc; // маска поиска
	var myFound = myText.findText(); //собрана коллекция искомых элементов в статье
	
	if (myFound.length != 0) { // !=0
		
		for (var j = myFound.length; j--; ){ // j >= 0	
			var myLine = myFound[j] ;
			var myInd = myLine.index;
			myInd++; // если обрабатывается сочетание цифра-минус-цифра, то индекс должен указывать на минус
			myLine.parent.characters[myInd].noBreak = true;
		}  // j >= 0
	} // !=0
} // mySetNoBreak

/////////////////////////////////
function myAugment (myText) { //myAugment
	// Augment -- наращение. Ищем в тексте неправильные наращения, например, 5-ого, 14-ых, и исправляем их: 5-го, 14-х
	var mySearchedTwoCharacters = '(\\d-ый[,.;:!?\\s]|\\d-ой[,.;:!?\\s]|\\d-ий[,.;:!?\\s]|\\d-ым[,.;:!?\\s]|\\d-им[,.;:!?\\s]|\\d-ом[,.;:!?\\s]|\\d-ем[,.;:!?\\s]|\\d-ых[,.;:!?\\s]|\\d-их[,.;:!?\\s]|\\d-ые[,.;:!?\\s]|\\d-ьи[,.;:!?\\s])';
	var mySearchedThreeCharacters = '(\\d-ого[,.;:!?\\s]|\\d-его[,.;:!?\\s]|\\d-ому[,.;:!?\\s]|\\d-ему[,.;:!?\\s]|\\d-ыми[,.;:!?\\s]|\\d-ими[,.;:!?\\s])';
	app.findGrepPreferences = NothingEnum.nothing;
	app.findGrepPreferences.findWhat = mySearchedTwoCharacters;				
	var myFoundSamples = myText.findGrep();
	
	if (myFoundSamples.length != 0) { // 1
		// цикл по числу элементов коллекции. Движение снизу вверх
		for (var j = myFoundSamples.length; j--; ) {	
			myLine = myFoundSamples[j] ;
			myLine.characters.itemByRange(2, 2).remove();	// удаляем букву после дефиса
		}
	} // 1
	app.findGrepPreferences = NothingEnum.nothing;
	app.findGrepPreferences.findWhat = mySearchedThreeCharacters;				
	var myFoundSamples = myText.findGrep();
	
	if (myFoundSamples.length != 0) { // 2
	// цикл по числу элементов коллекции. Движение снизу вверх
		for (var j = myFoundSamples.length; j--; ) {	
			myLine = myFoundSamples[j] ;
			myLine.characters.itemByRange(2, 2).remove();	// удаляем букву после дефиса
		}
   } // 2
} //myAugment

////////////
// SingleLevelQuotesForDoTextOK.jsx
function myAllQuoteProcessing (myText) { // myAllQuoteProcessing
	
	try {
		var myLanguage = myText.paragraphs[0].appliedLanguage;
	} catch (e) {}

	if (myLanguage.name[0] == '[') { // в любом языке информация, что язык не определен, заключена в квадратные скобки.
		alert("Не определен язык текста первого абзаца.\nПроцедура упорядочения кавычек отменена.");
		return;
	}
	app.documents[0].textPreferences.typographersQuotes = true; // установка типографских кавычек для нового текста
	
	// абзацы статьи...
	for (var i = 0, l = myText.paragraphs.length; i < l; i++) { // i
		myProcessingOfCurrentParagraph(myText.paragraphs[i],myLanguage);
	} // i
	// сноски...
	for (var i = 0, l = myText.footnotes.length; i < l; i++) { // i
		for (var j = 0, m = myText.footnotes[i].paragraphs.length; j < m; j++) { // j
			myProcessingOfCurrentParagraph(myText.footnotes[i].paragraphs[j],myLanguage);
		} // j
	} // i
	// таблицы в основном тексте...
	for (var i = 0, l = myText.tables.length; i < l; i++) { // i
		for (var j = 0, m = myText.tables[i].cells.length; l < m; j++) { // j
			for (var k = 0, n = myText.tables[i].cells[j].paragraphs.length; k < n; k++) { // k
				myProcessingOfCurrentParagraph(myText.tables[i].cells[j].paragraphs[k], myLanguage);
			} // k
		} // j
	} //i
	// таблицы в привязанных текстовых фреймах или группах...
	myAllPageItemsProcessing(myText, myLanguage);
	///
	return;
} // myAllQuoteProcessing

///
function myProcessingOfCurrentParagraph (myPara, myLanguage) { // myProcessingOfCurrentParagraph
	// если в обычной функции можно так определить переменную цикла (пусть она называется q):   for (q = 0; q < ...; q++)
	// то в рекурсивной функции переменная цакла обязательно должна предваряться инструкцией var:   for (var q = 0; q < ...; q++)
	// это гарантирует, что при при каждом рекурсивном вызове будет создаваться свой экземпляр переменной цикла.
	//
	myQuoteChars(myPara, myLanguage);
	myAllPageItemsProcessing(myPara, myLanguage);
	
	for (var pp = 0; pp < myPara.tables.length; pp++) { // pp
		var myTable = myPara.tables[pp]; // таблица в этом абзаце
		
		for (var jj = 0; jj < myTable.cells.length; jj++) { // jj
			var myCellInTable = myTable.cells[jj]; // ячейка в этой таблице
			
			for (var kk = 0; kk < myCellInTable.paragraphs.length; kk++) {
				myProcessingOfCurrentParagraph(myCellInTable.paragraphs[kk], myLanguage); // рекурсивный вызов функции
			}
		} // jj
	} // pp
} // myProcessingOfCurrentParagraph

/////
function myQuoteChars(myAbzatz, myLanguage) { //myQuoteChars
	try { 
		myPt.appliedLanguage = myLanguage;
	}
	catch (e) {};
	
	var myLetters = '(„|“|«|»|”|‚|‘|’|\'|\")';
	var myPrevChar, myNextChar;
	var myP, myN;
	app.findGrepPreferences = NothingEnum.nothing;
	app.findGrepPreferences.findWhat = myLetters;				
	var myFoundSamples = myAbzatz.findGrep();
	
	if (myFoundSamples.length != 0) { // myFoundSamples.length != 0
	// цикл по числу элементов коллекции. Движение снизу вверх
		for (var j = myFoundSamples.length-1; j >= 0; j--) { // j >= 0; j--	
			var myLine = myFoundSamples[j];
			myPrevChar = myText.characters[myLine.index-1].contents;
			myNextChar = myText.characters[myLine.index+1].contents;
			myP = myPrevChar.search("(\\s|,|\\.)"); // -1 совпадения не найдено
			myN = myNextChar.search("(\\s|,|\\.)"); // -1 совпадения не найдено
			
			if (myP == 0 || myN == 0) {
				myLine.characters[0].contents = "\"";  
			}
	  
			// s' может быть апострофом в конце слова Boys' Brigade / Boys' or Girls' Snow Flurry Boots, а может и закрывающей кавычкой.
			// Очевидно, что апостроф в конце слова может быть гораздо реже, нежели закрывающая кавычка.
			// Но коль скоро такой случай возможен, покрасим эти апостофы в цвет myInfoColor.
			if (myPrevChar == 's' && myNextChar == ' ') { // myPrevChar == 's' && myNextChar == ' '
				myLine.contents = myApostrof;
				myLine.fillColor = myDocument.colors.itemByName("myInfoColor");
			} // myPrevChar == 's' && myNextChar == ' '
		} // j >= 0; j--
	} // myFoundSamples.length != 0
} //myQuoteChars

////
function myAllPageItemsProcessing(myAPI, myLanguage) { // myAllPageItemsProcessing
	for (var t = 0, l = myAPI.allPageItems.length; t < l; t++) { // t
		
		if (myAPI.allPageItems[t].constructor.name == "TextFrame") { // "TextFrame"
			myProcessingOfTextFrame(myAPI.allPageItems[t], myLanguage);
		} // "TextFrame"
		
		if (myAPI.allPageItems[t].constructor.name == "Group") { // "Group"
			
			for (var p = 0, m = myAPI.allPageItems[t].textFrames.length; p < m; p++) { // p
				myProcessingOfTextFrame(myAPI.allPageItems[t].textFrames[p], myLanguage);
			} // p
		} // "Group"
	} // t
} // myAllPageItemsProcessing

////
function myProcessingOfTextFrame(myTextFrame, myLanguage) { // myProcessingOfTextFrame
	for (var i = 0, l = myTextFrame.tables.length; i < l; i++) { // i
		
		for (var j = 0, m = myTextFrame.tables[i].cells.length; j < m; j++) { // j
			
			for (var k = 0, n = myTextFrame.tables[i].cells[j].paragraphs.length; k < n; k++) {
				myProcessingOfCurrentParagraph(myTextFrame.tables[i].cells[j].paragraphs[k], myLanguage);
			}
		} // j
	} // i
	
	for (var i = 0, l = myTextFrame.paragraphs.length; i < l; i++) { // i i
		myProcessingOfCurrentParagraph(myTextFrame.paragraphs[i], myLanguage);
	} // i i	
} // myProcessingOfTextFrame